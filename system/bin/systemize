#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
# > ENTER MAGISK MODULE ID HERE
ID="terminal_systemizer"

#=========================== Check root
_name=$0; _name=${_name##*/}
id | grep -q root
[ $? -ne 0 ] && { echo "$ID needs to be in a root shell!"; echo "type 'su' then '$_name'"; exit 1; }

#=========================== Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/cache/${ID}.log
oldLOG=/cache/${ID}-old.log
# > Verbose output goes here
VERLOG=/cache/${ID}-verbose.log
oldVERLOG=/cache/${ID}-verbose-old.log

#=========================== Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null
set -x 2>$VERLOG

#=========================== Determine if A/B OTA device
if [ -d /system_root ]; then
	isABDevice=true
	SYSTEM=/system_root/system
	SYSTEM2=/system
else
	isABDevice=false
	SYSTEM=/system
	SYSTEM2=/system
fi

#=========================== Set Busybox (Used by Magisk) up
set_busybox() {
	if [ -x "$1" ]; then
		for i in $(${1} --list); do
			if [ "$i" != 'echo' ]; then
				alias "$i"="${1} $i" 2>>$LOG >>$LOG
			fi
		done
		_busybox=true
		_bb=$1
	fi
}
_busybox=false
if [ -d /sbin/.core/busybox ]; then
	PATH=$PATH:/sbin/.core/busybox
	_bb=/sbin/.core/busybox/busybox
	_busybox=true
elif [ ! -x $SYSTEM/xbin/busybox ]; then
	set_busybox /data/magisk/busybox
	set_busybox /data/adb/magisk/busybox
else
	alias busybox=""
fi
if [ -x $SYSTEM/xbin/busybox ]; then
	_bb=$SYSTEM/xbin/busybox
elif [ -x $SYSTEM/bin/busybox ]; then
	_bb=$SYSTEM/bin/busybox
elif [ $_busybox ]; then
	true
else
	echo "! Busybox not detected.."
	echo "Please install one (@osm0sis' busybox recommended)"
	false
fi
[ $? -ne 0 ] && exit $?
alias echo='echo -e'
[ -n "$LOGNAME" ] && alias clear='echo'
_bbname=$(busybox | head -n1)
_bbname=${_bbname%'('*}
BBok=true
if [ "$_bbname" == "" ]; then
	_bbname="BusyBox not found!"
	BBok=false
fi

#=========================== Default Functions and Variables

# Import util_functions.sh
[ -f /data/adb/magisk/util_functions.sh ] && . /data/adb/magisk/util_functions.sh || exit 1

# Magisk Mod Directory
MOUNTPATH=/sbin/.core/img
MODDIR="$MOUNTPATH/$ID"
if [ ! -d $MODDIR ]; then
	echo "Module not detected!"
	exit 1
fi

# Device Info
# BRAND MODEL DEVICE API ABI ABI2 ABILONG ARCH
BRAND=$(getprop ro.product.brand)
MODEL=$(getprop ro.product.model)
DEVICE=$(getprop ro.product.device)
ROM=$(getprop ro.build.display.id)
api_level_arch_detect

# Version Number
VER=$(grep_prop version $MODDIR/module.prop)
# Version Code
REL=$(grep_prop versionCode $MODDIR/module.prop)
# Author
AUTHOR=$(grep_prop author $MODDIR/module.prop)
# Mod Name/Title
MODTITLE=$(grep_prop name $MODDIR/module.prop)

# Colors
G='\e[01;32m'		# GREEN TEXT
R='\e[01;31m'		# RED TEXT
Y='\e[01;33m'		# YELLOW TEXT
B='\e[01;34m'		# BLUE TEXT
V='\e[01;35m'		# VIOLET TEXT
Bl='\e[01;30m'		# BLACK TEXT
C='\e[01;36m'		# CYAN TEXT
W='\e[01;37m'		# WHITE TEXT
BGBL='\e[1;30;47m'	# Background W Text Bl
N='\e[0m'			# How to use (example): echo "${G}example${N}"
loadBar=' '			# Load UI
# Remove color codes if -nc or in ADB Shell
[ -n "$1" -a "$1" == "-nc" ] && shift && NC=true
[ "$NC" -o -n "$LOGNAME" ] && {
	G=''; R=''; Y=''; B=''; V=''; Bl=''; C=''; W=''; N=''; BGBL=''; loadBar='=';
}

# Divider (based on $MODTITLE, $VER, and $REL characters)
character_no=$(echo $MODTITLE $VER $REL | tr " " '_' | wc -c)
div="${Bl}$(printf '%*s' "${character_no}" '' | tr " " "=")${N}"

# Title Div
title_div() {
	no=$(echo $@ | wc -c)
	extdiv=$((no-character_no))
	echo "${W}$@${N} ${Bl}$(printf '%*s' "$extdiv" '' | tr " " "=")${N}"
}

# set_file_prop <property> <value> <prop.file>
set_file_prop() {
	sed -i "s/${1}=.*/${1}=${2}/g" $3
}

# https://github.com/fearside/ProgressBar
ProgressBar() {
# Process data
	_progress=$(((${1}*100/${2}*100)/100))
	_done=$(((${_progress}*4)/10))
	_left=$((40-$_done))
# Build progressbar string lengths
	_done=$(printf "%${_done}s")
	_left=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
printf "\rProgress : ${BGBL}|${N}${_done// /${BGBL}$loadBar${N}}${_left// / }${BGBL}|${N} ${_progress}%%"
}

#https://github.com/fearside/SimpleProgressSpinner
Spinner() {

# Choose which character to show.
case ${_indicator} in
	"|") _indicator="/";;
	"/") _indicator="-";;
	"-") _indicator="\\";;
	"\\") _indicator="|";;
	# Initiate spinner character
	*) _indicator="\\";;
esac

# Print simple progress spinner
printf "\r${@} [${_indicator}]"
}

# "cmd & spinner [message]"
e_spinner() {
	PID=$!
	h=0; anim='-\|/';
	while [ -d /proc/$PID ]; do
		h=$(((h+1)%4))
		sleep 0.02
		printf "\r${@} [${anim:$h:1}]"
	done
}

# test_connection
test_connection() {
	echo -n "Testing internet connection "
	ping -q -c 1 -W 1 google.com >/dev/null 2>/dev/null && echo "- OK" || { echo "Error"; false; }
}

# Log files will be uploaded to termbin.com
upload_logs() {
	$BBok && {
		test_connection
		[ $? -ne 0 ] && exit
		verUp=none; oldverUp=none; logUp=none; oldlogUp=none;
		echo "Uploading logs"
		[ -s $VERLOG ] && verUp=$(cat $VERLOG | nc termbin.com 9999)
		[ -s $oldVERLOG ] && oldverUp=$(cat $oldVERLOG | nc termbin.com 9999)
		[ -s $LOG ] && logUp=$(cat $LOG | nc termbin.com 9999)
		[ -s $oldLOG ] && oldlogUp=$(cat $oldLOG | nc termbin.com 9999)
		echo -n "Link: "
		echo "$MODEL ($DEVICE) API $API\n$ROM\n$ID\n
		O_Verbose: $oldverUp
		Verbose:   $verUp
	
		O_Log: $oldlogUp
		Log:   $logUp" | nc termbin.com 9999
	} || echo "Busybox not found!"
	exit
}

# Heading
mod_head() {
	clear
	echo "$div"
	echo "${W}$MODTITLE $VER${N}(${Bl}$REL${N})"
	echo "by ${W}$AUTHOR${N}"
	echo "$div"
	echo "${W}$_bbname${N}"
	echo "${Bl}$_bb${N}"
	echo "$div"
	[ -s $LOG ] && echo "Enter ${W}logs${N} to upload logs" && echo $div
}

#=========================== Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

help_me() {
	cat << EOF
$MODTITLE $VER($REL)
by $AUTHOR
	
Usage: $_name
   or: $_name [options]...
   
Options:
    -nc                    removes ANSI escape codes
    -a [package name]      systemizes the package name(s) provided
    -d [apk dir]           systemizes the apk(s) provided
    -l                     list all systemized apps
    -h                     show this message
EOF
exit
}

use_aapt=false
[[ "$(which aapt)" ]] && use_aapt=true
export PATH=$MODDIR:$PATH
sysapp=0
privapp=0
perm_xml1=$SYSTEM/etc/permissions/privapp-permissions-platform.xml
perm_xml=$MODDIR$SYSTEM2/etc/permissions/privapp-permissions-platform.xml
[ -f $perm_xml1 ] && patch_xml=true || patch_xml=false
mkdir -p $MODDIR$SYSTEM2/etc/permissions 2>/dev/null
LISTFILE=/cache/systemize.list
BOOTMODE=true
RESCAN=true

# Detect if /system/app is available
[ -d $SYSTEM/app ] && sysapp=1

# Detect if /system/priv-app is available
[ -d $SYSTEM/priv-app ] && privapp=1

# Detect free space
free_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $4}')"
total_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $2}')"

# List installed apps
list_installed_apps() {
	if $RESCAN; then
		rm $LISTFILE 2>$LOG; app=(); app1=(); app2=();
		for i in $(ls /data/data); do
			h=$(((h+1)%4))
			Spinner "Loading Apps"
			if ! dumpsys package $i | grep -qEm1 -e "(codePath=$SYSTEM|targetSdk=0|codePath=/vendor/overlay)" - ; then
				app=${i##*/}
				package=$app
				package[c]=$package
				dir_app[c]=/data/app/$app-*/base.apk
				$use_aapt && { app=$(aapt d badging ${dir_app[c]} | grep 'application-label:'); app=${app#*:}; }
				app1[c]=$(echo "$app" | tr ' ' '_' | tr -d "'")
				echo "app${c}^=${app1[c]}^=${dir_app[c]}^=${package[c]}^=" >> $LISTFILE
				c=$((c+1))
			fi
		done
		app2=($(echo "${app1[@]}" | sed "s/.*'//g"))
		app=($(printf '%s\n' "${app2[@]}" | sort -f))
		RESCAN=false
	fi
}

# List systemized apps
list_systemized_apps() {
	systemized_apps=($(find $MODDIR -name "*.apk" -type f))
	cc=1
	for i in ${systemized_apps[@]}; do
		ProgressBar $cc ${#systemized_apps[@]}
		rev_dir[cc]=${i%/*}
		rev_label=${i%/*}
		rev_label[cc]=${rev_label##*/}
		rev_app[cc]=${rev_label[cc]}
		$use_aapt && { rev_app=$(aapt d badging $i | grep 'application-label:'); rev_app=${rev_app#*:}; rev_app[cc]=$(echo $rev_app | tr ' ' '_' | tr -d "'"); }
		cc=$((cc+1))
	done
}

get_cfg() {
	APP_NAME=$(grep -w "=${1}^" $LISTFILE | tr '^=' ' ' | awk '{print $2}')
	DIR_APP=$(grep -w "=${1}^" $LISTFILE | tr '^=' ' ' | awk '{print $3}')
	PKG=$(grep -w "=${1}^" $LISTFILE | tr '^=' ' ' | awk '{print $4}')
	[ $? -gt 0 ] && abort "Package doesn't exist!"
}

# Systemize function
# Usage: systemize <install directory> <apk directory>
systemize() {
	if [ "$2" ]; then
		apkdir="$(echo $2)"
		[ ! -f $apkdir ] && abort " $apkdir doesn't exist!"
		apk=${apkdir##*/}
		[ "$3" ] && PKG="$3"
		if [ "$PKG" ]; then
			name=$PKG
		else
			name=${apkdir%/*}; name=${name##*/}
			name=$(echo $name | tr -d ' ' | tr -d "'" | tr -d '*' | tr -d '-')
			$use_aapt && {
				name=$(aapt d badging $apkdir | head -n1 | awk '{print $2}')
				name=$(echo ${name#*=} | tr -d ' ' | tr -d "'")
			}
		fi
	fi
	chk_apk_size $apkdir
	echo " Transfering ${apk}(${name}) to '$1'..."
	if [ -d $SYSTEM/app/${name} ] || [ -d $SYSTEM/priv-app/${name} ] || [ -d $MODDIR$SYSTEM2/app/${name} ] || [ -d $MODDIR$SYSTEM2/priv-app/${name} ]; then
		abort " App exists!"
	else
		mkdir -p ${MODDIR}${1}/${name}
		cp -f $apkdir ${MODDIR}${1}/${name}
		set_perm_recursive  ${MODDIR}${1}/${name} 0 0 0755 0755
		$patch_xml && [ ${1##*/} == "priv-app" ] && {
			echo " Granting Permissions"
			pp=0
			app_perm=(); perm=()
			for i in $(aapt d permissions $apkdir | grep -v 'package:' | awk '{print $2}'); do
				_perm=$(echo ${i#*=} | tr -d "'")
				perm[pp]=$_perm
				pp=$((pp+1))
			done
			app_perm=($(echo "${perm[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
			echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
	Generated by $MODTITLE by $AUTHOR
-->
<permissions>
    <privapp-permissions package=\"${name}\">" >> $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
			for i in ${app_perm[@]}; do
				echo "        <permission name=\"$i\"/>" >> $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
			done
			echo "    </privapp-permissions>
</permissions>" >> $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
			chmod 644 $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${name}.xml
		}
		echo " ${name} - ${W}Done${N}"
	fi
}

enter_apk_dir() {
	echo -n "Enter APK Path: "
	read apkdir
	echo "Checking if file exists..."
	if [ -f "$apkdir" ]; then
		echo " - OK"
		apk=${apkdir##*/}
		echo "Checking if file is an APK..."
		tmpapk=${apk##*.}
		if [ "$tmpapk" == "apk" ]; then
			echo " - OK"
			echo "Checking package name..."
			name=${apk%'.apk'*}
			if [ $use_aapt ]; then
				name=$(aapt d badging $apkdir | head -n1 | awk '{print $2}')
				name=${name#*=}
			fi
			name=$(echo $name | tr -d ' ' | tr -d "'")
			echo " - $name"
			if [ $privapp == 1 ] && [ $sysapp == 1 ]; then 
				echo "Where to install?"
				echo -n "< 1 - $SYSTEM/app | 2 - $SYSTEM/priv-app > : "
				read loc
				if [ "$loc" == 1 ]; then
					systemize /system/app
				elif [ "$loc" == 2 ]; then
					systemize /system/priv-app
				else
					abort "Invalid!"
				fi
			elif [ $sysapp == 1 ] && [ $privapp == 0 ]; then
				systemize /system/app
			elif [ $privapp == 1 ] && [ $sysapp == 0 ]; then
				systemize /system/priv-app
			else
				abort "No installation directory!"
			fi
		else
			abort "$apk is not an APK!"
		fi
	else
		abort "$apkdir doesn't exist!"
	fi
}

enter_apk_name() {
	echo "Enter the App Label of the installed app"
	echo "Example: com.android.launcher"
	echo -n " > "
	read apklabel
	if [ ! "$apklabel" ]; then
		abort "error"
	fi
	echo "Checking if $apklabel is installed"
	list_installed_apps 2>$LOG
	get_cfg $apklabel
	if [ "$PKG" ]; then
		echo " - OK"
		apkdir=$DIR_APP
		if [ -d $SYSTEM/priv-app ]; then
			installdir="priv-app"
		else
			installdir="app"
		fi
		systemize /system/$installdir $apkdir
		[ $? -ne 0 ] && echo "Failed!" && exit 1
	else
		abort "Failed!"
	fi
}

# Check apk size
chk_apk_size() {
	dir_app=$(echo $1)
	free_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $4}')"
	total_space="$(busybox df -m $MOUNTPATH | tail -n1 | awk '{print $2}')"
	apk_sizeM="$(du -m $dir_app | awk '{print $1}')"
	if [ "$apk_sizeM" -gt "$((free_space-10))" ]; then
		echo " Checking APK size - ${W}${apk_sizeM}M${N}"
		echo "- Insufficient $MOUNTPATH space!"
		echo "- APK size: ${apk_sizeM}M | $MOUNTPATH Free: ${free_space}M"
		echo "- Using magisk_merge.img to merge images..."
		merge_img ${dir_app} 2>>$LOG
	else
		echo " Checking APK size - ${W}${apk_sizeM}M${N}"
	fi
}

# Merge
merge_img() {
	apk_size=$(($(du -m $1 | awk '{print $1}')+2))
	IMG=/data/adb/magisk_merge.img
	install_dir=/dev/tmp/${ID}
	path=/dev/magisk_merge
	tmpmodpath=$path/${ID}
	mkdir -p $install_dir
	reqSizeM=$apk_size
	MOUNTPATH=$path
	mount_magisk_img  
	cp -af $MODDIR/. $tmpmodpath
	MODDIR=$tmpmodpath
}

mount -o remount,rw $MOUNTPATH 2>$LOG
mount -o rw,remount $MOUNTPATH 2>$LOG
mount -o remount,rw /cache 2>$LOG
mount -o rw,remount /cache 2>$LOG
busybox mount -o remount,rw $MOUNTPATH 2>$LOG
busybox mount -o rw,remount $MOUNTPATH 2>$LOG
busybox mount -o remount,rw /cache 2>$LOG
busybox mount -o rw,remount /cache 2>$LOG

menu_list_systemized_apps() {
	clear
	list_installed_apps 2>>$LOG
	clear
	echo "$div"
	title_div "Installed Apps"
	echo "$div"
	echo ""
	for i in $(seq 0 $((${#app[@]}-1))); do
		echo " $((i+1)) - ${W}${app[i]}${N}" | tr '_' ' '
	done
	echo ""
	echo " ${Bl}To systemize multiple apps, enter multiple number. Example:${N} \"1 $(echo ${#app[$((${#app[@]}/3))]}) $(echo ${#app[$((${#app[@]}/2))]})\""
	echo " x - ${Bl}Back to Menu${N}"
	echo " r - Refresh list"
	echo " 0 -  Exit"
	echo -n "[CHOICE]: "
	read installed
	[ "$installed" == "x" ] && menu
	[ "$installed" == "r" ] && RESCAN=true && menu_list_systemized_apps
	for i in $installed; do
		if [ "$i" -gt ${#app[@]} ] || [ "$i" -lt 0 ] || [ "$i" == "" ] || [ -n "$(echo $i | tr -d '0-9')" ] ; then
			abort "Invalid!"
		elif [ "$i" == 0 ]; then
			exit
		else
			echo "$div"
			i=$((i-1))
			echo "Systemizing ${W}${app[i]}${N}" | tr '_' ' '
			get_cfg ${app[i]}
			echo -n " Checking APK directory"
			if [ -f $DIR_APP ]; then
				echo " - ${W}OK${N}"
				apkdir=$DIR_APP
				apk=${apkdir##*/}
				name=${apkdir%/*}; name=${name##*/}; name=$(echo $name | tr -d ' ' | tr -d "'" | tr -d '*' | tr -d '-')
				echo " Checking package name - ${W}$PKG${N}"
				if [ $privapp == 1 ] && [ $sysapp == 1 ]; then 
					echo " Where to install?"
					echo -n " < 1 - $SYSTEM/app | 2 - $SYSTEM/priv-app | 0 - cancel > : "
					read loc
					if [ "$loc" == 1 ]; then
						systemize /system/app
					elif [ "$loc" == 2 ]; then
						systemize /system/priv-app
					elif [ "$loc" == 0 ]; then
						echo " ${app[i]} canceled"; true
					else
						abort "Invalid!"
					fi
				elif [ $sysapp == 1 ] && [ $privapp == 0 ]; then
					systemize /system/app
				elif [ $privapp == 1 ] && [ $sysapp == 0 ]; then
					systemize /system/priv-app
				else
					abort " - No installation directory!"
				fi  
			else
				abort " - APK doesn't exist!"
			fi
		fi
	done
	echo "Reboot to apply changes"
	echo -n "Return to menu? < y | n >: "
	read mchoice
	[ "$mchoice" == "y" ] && menu || exit
}

revert_apps() {
	list_systemized_apps 2>$LOG
	clear
	echo "$div"
	title_div "Revert"
	echo "$div"
	echo ""
	for i in $(seq 1 $((${#rev_app[@]}-1))); do
		echo " $i - ${W}${rev_app[i]}${N}" | tr '_' ' '
	done
	echo ""
	echo " ${Bl}To systemize multiple apps, enter multiple number. Example:${N} \"1 $(echo ${#rev_app[$((${#rev_app[@]}/3))]}) $(echo ${#rev_app[$((${#rev_app[@]}/2))]})\""
	echo " x - ${Bl}Back to Menu${N}"
	echo " 0 -  Exit"
	echo -n "[CHOICE]: "
	read revert
	[ "$revert" == "x" ] && menu
	for i in $revert; do
		if [ "$i" -gt ${#rev_app[@]} ] || [ "$i" -lt 0 ] || [ "$i" == "" ] || [ -n "$(echo $i | tr -d '0-9')" ] ; then
			abort "Invalid!"
		elif [ "$i" == 0 ]; then
			exit
		else
			echo "Reverting ${rev_app[i]}..." | tr '_' ' '
			rm -rf ${rev_dir[i]}
			rm -rf $MODDIR$SYSTEM2/etc/permissions/privapp-permissions-${rev_label[i]}.xml 2>$LOG >$LOG
		fi
	done
	echo "Reboot to apply changes"
	echo -n "Return to menu? < y | n >: "
	read mchoice
	[ "$mchoice" == "y" ] && menu || exit
}

menu() {
	mod_head
	echo ""
	echo " 1 - Systemize Installed Apps (Listed)"
	echo " 2 - Systemize Installed Apps (Enter label) "
	echo " 3 - Systemize given APK"
	if [[ $(find $MODDIR -name "*.apk" 2>$LOG) ]]; then
		echo " 4 - Revert Systemized Apps"
	fi
	echo " d - ${C}Donate${N}"
	echo " 0 - Exit"
	echo ""
	echo -n "[CHOICE]: "
	read choice
	if [ "$choice" == 1 ]; then
		menu_list_systemized_apps
	elif [ "$choice" == 2 ]; then
		clear
		enter_apk_name
		exit $?
	elif [ "$choice" == 3 ]; then
		clear
		enter_apk_dir
		exit $?
	elif [ "$choice" == 4 ]; then
		clear
		revert_apps
		exit $?

	elif [ "$choice" == "d" ] || [ "$choice" == "D" ]; then
		am start https://paypal.me/veez21 >$LOG
	elif [ "$choice" == "logs" ]; then
		upload_logs
	elif [ "$choice" == 0 ]; then
		exit
	else  echo "Invalid!"
		exit 1
	fi
}

case "$1" in
	-a) shift
		for i in "$@"; do [ -d $SYSTEM/priv-app ] && systemize /system/priv-app "/data/app/${i}-*/base.apk" || systemize /system/app "/data/app/${i}-*/base.apk" "$i"; echo "$div"; done; exit;;
	-d) shift
		for i in "$@"; do [ -d $SYSTEM/priv-app ] && systemize /system/priv-app "$i" || systemize /system/app "$i"; echo "$div"; done; exit;;
	-l) list_systemized_apps 2>>$LOG
		echo
		for i in ${!rev_dir[@]}; do
			title_div "App $i"
			echo "Name\t: $(echo ${rev_app[i]}| tr '_' ' ')\nLabel\t: ${rev_label[i]}\nDirectory\t: $(echo ${rev_dir[i]} | sed 's/.*\/system\///g')" | expand -t 10
		done
		exit;;
	-h|--help) help_me;;
esac

menu
exit $?
